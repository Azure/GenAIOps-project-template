name: CD QA Pipeline

on:
  push:
    branches:
      - release/* 

jobs:

  setup-env-job:
    if: ${{ github.repository != 'Azure/GenAIOps-project-template' }}        
    runs-on: ubuntu-latest
    environment: qa
    outputs:
      AZURE_APP_SERVICE_NAME: ${{ steps.config-env.outputs.AZURE_APP_SERVICE_NAME }}
      AZURE_APP_SERVICE_PLAN_NAME: ${{ steps.config-env.outputs.AZURE_APP_SERVICE_PLAN_NAME }}
      AZURE_CONTAINER_REGISTRY_NAME: ${{ steps.config-env.outputs.AZURE_CONTAINER_REGISTRY_NAME }}
      AZURE_CONTAINER_REPOSITORY_NAME: ${{ steps.config-env.outputs.AZURE_CONTAINER_REPOSITORY_NAME }}
      AZURE_LOCATION: ${{ steps.config-env.outputs.AZURE_LOCATION }}
      AZURE_RESOURCE_GROUP: ${{ steps.config-env.outputs.AZURE_RESOURCE_GROUP }}
      AZUREAI_PROJECT_NAME: ${{ steps.config-env.outputs.AZUREAI_PROJECT_NAME }}            
      AZURE_SUBSCRIPTION_ID: ${{ steps.config-env.outputs.AZURE_SUBSCRIPTION_ID }}
      AZURE_SEARCH_ENDPOINT: ${{ steps.config-env.outputs.AZURE_SEARCH_ENDPOINT }}
      AZURE_OPENAI_CHAT_DEPLOYMENT: ${{ steps.config-env.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT }}
      AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{steps.config-env.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
      AZURE_OPENAI_EMBEDDING_MODEL: ${{steps.config-env.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
      AZURE_OPENAI_API_VERSION: ${{steps.config-env.outputs.AZURE_OPENAI_API_VERSION}}
      AZURE_OPENAI_ENDPOINT: ${{steps.config-env.outputs.AZURE_OPENAI_ENDPOINT}}
      AZURE_OPENAI_NAME: ${{steps.config-env.outputs.AZURE_OPENAI_NAME}}
      PROMPTFLOW_WORKER_NUM: ${{steps.config-env.outputs.PROMPTFLOW_WORKER_NUM}}
      PROMPTFLOW_SERVING_ENGINE: ${{steps.config-env.outputs.PROMPTFLOW_SERVING_ENGINE}}
    steps: 
      - uses: actions/checkout@v4   
      - name: Provision qa environment
        uses: ./.github/actions/config-env
        id: config-env
        with:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}          
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          MANUAL_PROVISIONING: ${{ vars.MANUAL_PROVISIONING }}          
        env:
          AZUREAI_PROJECT_NAME: ${{ vars.AZUREAI_PROJECT_NAME }}
          AZURE_APP_SERVICE_NAME: ${{ vars.AZURE_APP_SERVICE_NAME }}
          AZURE_APP_SERVICE_PLAN_NAME: ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }}
          AZURE_CONTAINER_REGISTRY_NAME: ${{ vars.AZURE_CONTAINER_REGISTRY_NAME }}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{ vars.AZURE_CONTAINER_REPOSITORY_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ vars.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT }}
          AZURE_OPENAI_DEPLOYMENT: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT }}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{ vars.AZURE_OPENAI_EMBEDDING_MODEL }}
          AZURE_OPENAI_ENDPOINT: ${{ vars.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_NAME: ${{ vars.AZURE_OPENAI_NAME }}
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}              
          AZURE_SEARCH_ENDPOINT: ${{ vars.AZURE_SEARCH_ENDPOINT }}
          LOAD_AZURE_SEARCH_SAMPLE_DATA: ${{ vars.LOAD_AZURE_SEARCH_SAMPLE_DATA }}
          AZURE_SEARCH_NAME: ${{ vars.AZURE_SEARCH_NAME }}
          PROMPTFLOW_SERVING_ENGINE: ${{ vars.PROMPTFLOW_SERVING_ENGINE }}
          PROMPTFLOW_WORKER_NUM: ${{ vars.PROMPTFLOW_WORKER_NUM }}
          AZURE_PRINCIPAL_ID: ${{ vars.AZURE_PRINCIPAL_ID }}
          AZUREAI_HUB_NAME: ${{ vars.AZUREAI_HUB_NAME }}
          AZURE_APP_INSIGHTS_NAME: ${{ vars.AZURE_APP_INSIGHTS_NAME }}
          AZURE_KEY_VAULT_NAME: ${{ vars.AZURE_KEY_VAULT_NAME }}
          AZURE_LOG_ANALYTICS_NAME: ${{ vars.AZURE_LOG_ANALYTICS_NAME }}
          AZURE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}

  qa-flow-evaluation:
    needs: [setup-env-job]
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AI-Based quality evaluation
        env: 
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_ENDPOINT}}
          AZURE_OPENAI_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZUREAI_PROJECT_NAME: ${{needs.setup-env-job.outputs.AZUREAI_PROJECT_NAME}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env-job.outputs.AZURE_OPENAI_API_VERSION}}
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_OPENAI_NAME: ${{needs.setup-env-job.outputs.AZURE_OPENAI_NAME}}
          LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}
          AZURE_LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}          
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          PROMPTFLOW_WORKER_NUM: ${{needs.setup-env-job.outputs.PROMPTFLOW_WORKER_NUM}}
          PROMPTFLOW_SERVING_ENGINE: ${{needs.setup-env-job.outputs.PROMPTFLOW_SERVING_ENGINE}}
          AZURE_APP_SERVICE_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_NAME}}
          AZURE_APP_SERVICE_PLAN_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_PLAN_NAME}}      
        run: |
            echo "Run AI-Based flow evaluation"
            required_envs=(
              "AZURE_OPENAI_ENDPOINT"
              "AZURE_OPENAI_DEPLOYMENT"
              "AZUREAI_PROJECT_NAME"
              "AZURE_OPENAI_API_VERSION"
              "AZURE_SUBSCRIPTION_ID"
              "AZURE_RESOURCE_GROUP"
              "AZURE_OPENAI_NAME"
              "LOCATION"
              "AZURE_LOCATION"
              "AZURE_CONTAINER_REGISTRY_NAME"
              "AZURE_CONTAINER_REPOSITORY_NAME"
              "AZURE_SEARCH_ENDPOINT"
              "AZURE_OPENAI_CHAT_DEPLOYMENT"
              "AZURE_OPENAI_EMBEDDING_DEPLOYMENT"
              "AZURE_OPENAI_EMBEDDING_MODEL"
              "PROMPTFLOW_WORKER_NUM"
              "PROMPTFLOW_SERVING_ENGINE"
              "AZURE_APP_SERVICE_NAME"
              "AZURE_APP_SERVICE_PLAN_NAME"
            )
      
            for env_var in "${required_envs[@]}"; do
              if [ -z "${!env_var}" ]; then
                echo "Error: Environment variable '$env_var' is required but not set. Exiting."
                exit 1
              fi
            done            
            echo "AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}"
            echo "AZURE_OPENAI_NAME=${AZURE_OPENAI_NAME}"
            export AZURE_OPENAI_API_KEY=$(az cognitiveservices account keys list --resource-group ${AZURE_RESOURCE_GROUP} --name ${AZURE_OPENAI_NAME} --query "key1" --output tsv)
            export PYTHONPATH=./src:$PYTHONPATH
            python evaluations/qa_quality_eval.py
        shell: bash

      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        with:
            name: flow-eval-results
            path: qa_flow_quality_eval.json

  qa-safety-evaluation:
    needs: setup-env-job    
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AI-Based safety evaluation
        env:

          AZURE_LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_ENDPOINT}}
          AZURE_OPENAI_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZUREAI_PROJECT_NAME: ${{needs.setup-env-job.outputs.AZUREAI_PROJECT_NAME}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env-job.outputs.AZURE_OPENAI_API_VERSION}}
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_OPENAI_NAME: ${{needs.setup-env-job.outputs.AZURE_OPENAI_NAME}}
          LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          PROMPTFLOW_WORKER_NUM: ${{needs.setup-env-job.outputs.PROMPTFLOW_WORKER_NUM}}
          PROMPTFLOW_SERVING_ENGINE: ${{needs.setup-env-job.outputs.PROMPTFLOW_SERVING_ENGINE}}
          AZURE_APP_SERVICE_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_NAME}}
          AZURE_APP_SERVICE_PLAN_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_PLAN_NAME}}
          PREFIX: ${{ github.sha }}
        run: |
          echo "Run Automated Adversarial Testing"
          required_envs=(
            "AZURE_LOCATION"
            "AZURE_OPENAI_ENDPOINT"
            "AZURE_OPENAI_DEPLOYMENT"
            "AZUREAI_PROJECT_NAME"
            "AZURE_OPENAI_API_VERSION"
            "AZURE_SUBSCRIPTION_ID"
            "AZURE_RESOURCE_GROUP"
            "AZURE_OPENAI_NAME"
            "LOCATION"
            "AZURE_CONTAINER_REGISTRY_NAME"
            "AZURE_CONTAINER_REPOSITORY_NAME"
            "AZURE_SEARCH_ENDPOINT"
            "AZURE_OPENAI_CHAT_DEPLOYMENT"
            "AZURE_OPENAI_EMBEDDING_DEPLOYMENT"
            "AZURE_OPENAI_EMBEDDING_MODEL"
            "PROMPTFLOW_WORKER_NUM"
            "PROMPTFLOW_SERVING_ENGINE"
            "AZURE_APP_SERVICE_NAME"
            "AZURE_APP_SERVICE_PLAN_NAME"
            "PREFIX"
          )
          for env_var in "${required_envs[@]}"; do
            if [ -z "${!env_var}" ]; then
              echo "Error: Environment variable '$env_var' is required but not set. Exiting."
              exit 1
            fi
          done          
          export PYTHONPATH=./src:$PYTHONPATH
          export AZURE_OPENAI_API_KEY=$(az cognitiveservices account keys list --resource-group ${AZURE_RESOURCE_GROUP} --name ${AZURE_OPENAI_NAME} --query "key1" --output tsv)          
          export PYTHONPATH=./src:$PYTHONPATH                 
          python evaluations/safety_eval.py

      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        with:
            name: adversarial-test
            path: adversarial_test.json

      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        with:
            name: adversarial-test-w-jailbreak
            path: adversarial_test_w_jailbreak.json
 
  integration-testing:
    needs: [setup-env-job, qa-flow-evaluation, qa-safety-evaluation]
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Integration Tests
        run: |
          echo "Run QA Integration Tests"

  get-source-acr-and-repository:
    needs: [setup-env-job, setup-env-job, integration-testing]
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_DEV_COLLECT_TELEMETRY: no
    outputs:
      SOURCE_REGISTRY: ${{ steps.get-vars.outputs.SOURCE_REGISTRY }}
      
    steps:
      - uses: actions/checkout@v4

      - name: Install Azure Developer CLI 
        uses: Azure/setup-azd@v1.0.0

      - name: azd Login
        shell: bash  
        run: |
            info=$(echo $AZURE_CREDENTIALS | jq -r '.')
            echo "::add-mask::$(echo $info | jq -r '.clientSecret')"
            azd auth login \
              --client-id "$(echo $info | jq -r '.clientId')" \
              --client-secret "$(echo $info | jq -r '.clientSecret')" \
              --tenant-id "$(echo $info | jq -r '.tenantId')"

      - name: Get source repo vars
        id: get-vars
        shell: bash      
        run: |
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
          echo "AZURE_LOCATION=$AZURE_LOCATION"
          echo "azd init -e $AZURE_ENV_NAME -l $AZURE_LOCATION -s $AZURE_SUBSCRIPTION_ID"
          azd init -e $AZURE_ENV_NAME -l $AZURE_LOCATION -s $AZURE_SUBSCRIPTION_ID

          # Run azd env refresh and capture last deployment outputs
          echo "🔶 | Run azd env refresh and capture outputs"
          azd env refresh -e "$AZURE_ENV_NAME"

          echo "🔶 | Get $AZURE_ENV_NAME environment variables"

          # Get environment variable from the last deployment
          AZURE_CONTAINER_REGISTRY_NAME=$(azd env get-values -e $AZURE_ENV_NAME | grep AZURE_CONTAINER_REGISTRY_NAME | cut -d'=' -f2 | tr -d '"' || true)
          echo "SOURCE_REGISTRY=$AZURE_CONTAINER_REGISTRY_NAME" >> "$GITHUB_OUTPUT" 
          echo "SOURCE_REGISTRY=$AZURE_CONTAINER_REGISTRY_NAME"      
          

  import-image:
    runs-on: ubuntu-latest
    needs: [setup-env-job, get-source-acr-and-repository] 
    environment: qa
    env:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      SOURCE_REGISTRY: ${{ needs.get-source-acr-and-repository.outputs.SOURCE_REGISTRY }}
      AZURE_CONTAINER_REGISTRY_NAME: ${{ needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME }}
      AZURE_CONTAINER_REPOSITORY_NAME: ${{ needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME }}
    steps:   
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if image exists
        id: check_image
        run: |
          if az acr repository show-tags -n $SOURCE_REGISTRY --repository $AZURE_CONTAINER_REPOSITORY_NAME --query "contains(@, 'develop-${{ github.sha }}')" | grep -q true; then
            echo "✅ | Image exists in Dev ACR."
            echo "IMAGE_EXISTS=true" >> $GITHUB_OUTPUT
            else
            echo "❌ | Image does not exist. Building a new image."
            echo "This should be done for bug fix scenarios only, don't forget to merge back to develop branch."
            echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
          fi


      - name: Get release version name
        id: get_release_version
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}
          echo "RELEASE_VERSION=$RELEASE_VERSION-rc" >> $GITHUB_ENV
          echo "RELEASE_VERSION is $RELEASE_VERSION-rc"

      ## Happy path: Import image from dev registry

      - name: Import image from dev registry
        if: steps.check_image.outputs.IMAGE_EXISTS == 'true'
        run: |
          echo "Image already IMAGE_EXISTS. retag with release version and import to qa acr."        
          az acr import -n $AZURE_CONTAINER_REGISTRY_NAME \
            --source $SOURCE_REGISTRY.azurecr.io/$AZURE_CONTAINER_REPOSITORY_NAME:develop-${{ github.sha }} \
            --image $AZURE_CONTAINER_REPOSITORY_NAME:$RELEASE_VERSION-${{ github.sha }} --force

          # in case ACR is in another subscription: 
          # az acr import -n myregistry --source sourcerepository:sourcetag -t targetrepository:targettag -r /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry

      ## Bug fix in release branch: needs to build a new image

      - name: Setup Python 
        if: steps.check_image.outputs.IMAGE_EXISTS == 'false'      
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Install Promptflow CLI
        if: steps.check_image.outputs.IMAGE_EXISTS == 'false'
        run: |
            python -m pip install --upgrade pip
            pip install promptflow --upgrade
            pf --version  

      - name: Install required dependencies
        if: steps.check_image.outputs.IMAGE_EXISTS == 'false'
        run: | 
          pip cache purge
          pip install --upgrade pip setuptools
          pip install -r src/requirements.txt

      - name: Create flow docker files
        if: steps.check_image.outputs.IMAGE_EXISTS == 'false'
        run: |
              # reference: https://github.com/microsoft/promptflow/tree/main/examples/tutorials/flow-deploy/azure-app-service
              pf flow build --source src --output dist --format docker       

      - name: Build and push image
        if: steps.check_image.outputs.IMAGE_EXISTS == 'false'
        env:
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}          
        run: |
            echo "✅ Building docker image..."
            path=dist
            image_tag=$AZURE_CONTAINER_REPOSITORY_NAME:$RELEASE_VERSION-${{ github.sha }}
            echo "Change working directory to $path"
            cd "$path"
            docker build -t "$image_tag"  .             

            full_registry_name="$AZURE_CONTAINER_REGISTRY_NAME.azurecr.io"
            echo "✅ Trying to login to $full_registry_name..."
            az acr login -n "$full_registry_name"

            acr_image_tag=$full_registry_name/$image_tag
            echo "✅ ACR image tag: $acr_image_tag"
            docker tag "$image_tag" "$acr_image_tag"

            echo "✅ Start pushing image...$acr_image_tag"
            docker push "$acr_image_tag"          

  deploy-flow:
    runs-on: ubuntu-latest
    needs: [setup-env-job, import-image] 
    environment: qa
    env:
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_DEV_COLLECT_TELEMETRY: no

    steps:   
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set az account
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az account set --subscription $AZURE_SUBSCRIPTION_ID
  
      - name: Deploy Flow
        env:
          AZURE_APP_SERVICE_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_NAME}}
          AZURE_APP_SERVICE_PLAN_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_PLAN_NAME}}
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}
        shell: bash             
        run: | 
          # Deploy Flow
          echo "🔶 | Deploying to Azure"
          image_tag=$AZURE_CONTAINER_REPOSITORY_NAME:$RELEASE_VERSION-${{ github.sha }}
          name="${AZURE_APP_SERVICE_NAME}"
          service_plan_name="${AZURE_APP_SERVICE_PLAN_NAME}"
          subscription="${AZURE_SUBSCRIPTION_ID}"
          resource_group="${AZURE_RESOURCE_GROUP}"
          registry_name="${AZURE_CONTAINER_REGISTRY_NAME}"
          full_registry_name="${registry_name}.azurecr.io"
          acr_image_tag=$full_registry_name/$image_tag
    
          echo "Image Tag: $image_tag"
          echo "ACR Image Tag: $acr_image_tag"          
          echo "App Service Name: $name"
          echo "Service Plan Name: $service_plan_name"
          echo "Subscription ID: $subscription"
          echo "Resource Group: $resource_group"
          echo "Registry Name: $registry_name"
          echo "Full Registry Name: $full_registry_name"

          function append_to_command {
            command=$1
            if [ -n "$subscription" ]; then
              command="$command --subscription $subscription"
            fi
            if $verbose; then
              command="$command --debug"
            fi
            echo "$command"
          }

          echo "🔶 | Trying to login to $registry_name..."
          az acr login -n "$registry_name"

          # Check if the container image exists
          echo "🔶 | Checking if ${acr_image_tag} exists..."
          set +e
          image_exists=$(az acr repository show --name $registry_name --image ${acr_image_tag} --query "name" -o tsv > /dev/null 2>&1 && echo true || echo false)
          set -e
          if [ -z "$image_exists" ]; then
            echo "❌ | $acr_image_tag does not exist"
            exit 1
          else
            echo "✅ | $acr_image_tag exists"
          fi

          # Check if the app exists
          echo "🔶 | Checking if the app exists..."
          app_exists=$(az webapp show --name $name --resource-group $resource_group --query "name" -o tsv)

          if [ -z "$app_exists" ]; then
            # Create app
            echo "🔶 | Creating $name app..."
            command="az webapp create --name $name -p $service_plan_name --deployment-container-image-name $acr_image_tag --startup-file 'bash start.sh' -g $resource_group"
            command=$(append_to_command "$command")
            echo "$command"
            eval "$command"
          else
            # Update app
            echo "🔶 | Updating $name app..."
            command="az webapp config container set --name $name --resource-group $resource_group --container-image-name $acr_image_tag"
            command=$(append_to_command "$command")
            echo "$command"
            eval "$command"
          fi
          
          # Set Registry and ACR credentials
          echo "🔶 | Setting ACR credentials in $registry_name registry..."
          az acr update -n $registry_name --admin-enabled true
          acr_username=$(az acr credential show --name $registry_name --query username --output tsv)
          acr_password=$(az acr credential show --name $registry_name --query passwords[0].value --output tsv)
          az webapp config container set --name $name --resource-group $resource_group --container-registry-user $acr_username --container-registry-password $acr_password 

          # Config environment variables
          echo "🔶 | Config  app $name env variables ..." 
          # Port default to 8080 corresponding to the DockerFile
          command="az webapp config appsettings set -g $resource_group --name $name --settings USER_AGENT=promptflow-appservice WEBSITES_PORT=8080"
          command=$(append_to_command "$command")
          echo "$command"
          eval "$command"

          # Restarting app
          echo "🔶 | Restarting app ...$name"          
          az webapp restart --name $name --resource-group $resource_group

          echo "🔗 Please go to https://portal.azure.com/ to config environment variables of $name app at (Settings>Configuration) or (Settings>Environment variables)"
          echo "Reach deployment logs at (Deployment>Deployment Central) and app logs at (Monitoring>Log stream)"
          echo "🔗 Reach advanced deployment tools at https://$name.scm.azurewebsites.net/"
          echo "🔗 Reach more details about app service at https://learn.microsoft.com/en-us/azure/app-service/"

      - name: GitHub Summary Step
        if: ${{ success() }}
        run: |
          echo "Deployment completed successfully! :rocket:" >> $GITHUB_STEP_SUMMARY        
          deep_link=https://portal.azure.com/#@/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/rg-$AZURE_ENV_NAME/overview
          echo "🔗 [View Resources Deployed Here]($deep_link)" >> $GITHUB_STEP_SUMMARY
